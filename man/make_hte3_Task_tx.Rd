% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hte3_Task_tx.R
\name{make_hte3_Task_tx}
\alias{make_hte3_Task_tx}
\title{Task object for meta-learners in the point-treatment setting.}
\usage{
make_hte3_Task_tx(
  data,
  modifiers,
  confounders,
  treatment,
  outcome,
  id = NULL,
  weights = NULL,
  treatment_type = c("default", "binomial", "categorical", "continuous"),
  pi.hat = NULL,
  mu.hat = NULL,
  m.hat = NULL,
  learner_pi = get_autoML(),
  learner_mu = get_autoML(),
  learner_m = NULL,
  multinomial_learner = Lrnr_independent_binomial,
  cross_fit_and_cv = TRUE,
  folds = 10,
  warn = TRUE,
  for_prediction = FALSE,
  ...
)
}
\arguments{
\item{data}{A named data frame or data.table containing treatment effect modifiers, potential confounders, treatment, and outcome.
Optionally, the dataset can contain weights and subject IDs. See the \code{data} argument of \code{\link{sl3_Task}} for further options.}

\item{confounders}{A character vector of variable names in \code{colnames(data)} for potential confounders \code{W} for which to adjust.}

\item{treatment}{A character specifying the variable name in \code{colnames(data)} for the numeric treatment assignment \code{A}.}

\item{outcome}{A character specifying the variable name in \code{colnames(data)} for the outcome variable \code{Y}.}

\item{id}{An (optional) character specifying the variable name in \code{colnames(data)} for observation IDs.}

\item{weights}{An (optional) character specifying the variable name in \code{colnames(data)} for observation weights.}

\item{pi.hat}{An (optional) numeric matrix of dimension \code{n by nlevels(A)} containing estimates of the propensity score \code{a -> pi(a | W_i)}
at each treatment level, where column \code{j} corresponds to treatment level \code{sort(unique(A))[j]}.
This argument can be used by DR-type learners. Alternatively, the estimates can be learned internally by passing an \code{sl3_Learner} to the \code{learner_pi} argument.}

\item{mu.hat}{An (optional) numeric matrix of dimension \code{n by nlevels(A)} containing estimates of the outcome regression \code{a -> mu(a, W_i)}
at each treatment level, where column \code{j} corresponds to treatment level \code{sort(unique(A))[j]}.
This argument can be used by DR-type learners. Alternatively, the estimates can be learned internally by passing an \code{sl3_Learner} to the \code{learner_m} argument.}

\item{m.hat}{An (optional) numeric vector of size \code{n} containing estimates of the conditional mean outcome \code{E[Y | W_i]}.
This argument can be used by R-type learners. Alternatively, the estimates can be learned internally by passing an \code{sl3_Learner} to the \code{learner_m} argument.}

\item{learner_pi}{A binomial \code{sl3_Learner} or \code{Stack} object specifying the learning algorithm to estimate the propensity score \code{w -> pi(a_star | w)}
at a given treatment level \code{a_star}. During training, this learner is passed an \code{sl3_Task} object \code{task} that contains a feature matrix \code{task$X}
of \code{confounders} and an outcome vector \code{task$Y} corresponding to the binary treatment indicator \code{1(A = a_star)}.
By default, \code{cross_fit_and_cv = TRUE}, and \code{learner_m} is fit with 10-fold cross-fitting using the \code{\link[causaltools]{make_cross_fitted}} function.
If a \code{Stack} object, the best model is selected using cross-validation.}

\item{learner_mu}{A \code{sl3_Learner} or \code{sl3_Task} object specifying the learning algorithm to estimate the outcome regression \code{w -> mu(a_star, w)}
at a given treatment level \code{a_star}. The outcome regression is estimated via a treatment-stratified regression.
During training, this learner is passed an \code{sl3_Task} object \code{task} that is subsetted to variables with treatment \code{A = a_star},
and contains a feature matrix \code{task$X} of \code{confounders} and an outcome vector \code{task$Y} corresponding to \code{outcome}.
By default, \code{cross_fit_and_cv = TRUE}, and \code{learner_m} is fit with 10-fold cross-fitting using the \code{\link[causaltools]{make_cross_fitted}} function.
If a \code{Stack} object, the best model is selected using cross-validation.}

\item{learner_m}{A \code{sl3_Learner} or \code{sl3_Task} object specifying the learning algorithm to estimate the conditional mean outcome \code{m}.
During training, this learner is passed an \code{sl3_Task} object \code{task} that contains a feature matrix \code{task$X} of \code{confounders}
and an outcome vector \code{task$Y} corresponding to \code{outcome}.
By default, \code{cross_fit_and_cv = TRUE}, and \code{learner_m} is fit with 10-fold cross-fitting using the \code{\link[causaltools]{make_cross_fitted}} function.
If a \code{Stack} object, the best model is selected using cross-validation.}

\item{multinomial_learner}{A \code{multinomial} \code{Lrnr_base} object to convert \code{learner_pi} from a \code{binomial} learner to a \code{multinomial} learner.}

\item{cross_fit_and_cv}{Whether to cross-fit the specified nuisance learners by applying \code{learner <- causaltools::make_cross_fitted(learner)}.}

\item{for_prediction}{A \code{boolean} of whether to return an hte3_Task without the nuisance training and estimates. This can be useful when you wish to construct a task for predicting on a new dataset.}

\item{...}{Additional arguments to pass to the \code{\link[sl3]{sl3_Task}} and \code{\link[tmle3]{tmle_Task}} constructors.}

\item{modifers}{A character vector of variable names in \code{colnames(data)} for treatment effect moderators.}
}
\value{
A \code{hte3_Task} object for the point-treatment data-structure
}
\description{
Constructs a \code{hte3_Task} object for meta-learners in the point-treatment setting containing relevant data and nuisance function estimators.
}
